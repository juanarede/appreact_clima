{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcons","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcons","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.987af1fa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\n\r\nfunction Weather(props) {\r\n    return (\r\n        <div className = \"container text-light\">\r\n            <div className=\"cards pt-4\">\r\n                <h1>{props.city}</h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.weatherIcons} display-1`}></i>\r\n                </h5>\r\n                \r\n                {props.temp_celsius ? (\r\n                    <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n                ):null}\r\n\r\n                {/**show max and min temp */}\r\n                {minmaxTemp(props.temp_min,props.temp_max)}\r\n\r\n                <h4 className=\"py-3\">{props.description}</h4>\r\n            </div>\r\n        </div>           \r\n        \r\n    );\r\n};\r\n\r\nfunction minmaxTemp(min, max){\r\n    if(min && max){\r\n         return(\r\n            <h3>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{max}&deg;</span>\r\n            </h3>\r\n            \r\n         )\r\n             \r\n         \r\n\r\n       \r\n    }\r\n \r\n    \r\n};\r\nexport default Weather\r\n","import React from 'react';\r\nimport \"./form.style.css\";\r\n\r\nfunction Form (props) {\r\n    return (\r\n    <div className=\"container\">\r\n          <div>{props.error ? error():null}</div>\r\n        <form onSubmit={props.loadweather}>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-3 offset-md-2\">\r\n                <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\"\r\n                placeholder=\"City\"/>\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n              <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\"\r\n              placeholder=\"Country\"/>\r\n              </div>\r\n              <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n              <button className=\"btn btn-warning\">Get Weather</button>\r\n              </div>\r\n            </div>\r\n        </form>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nfunction error() {\r\n    return (\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter City and Country\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\n\nimport './App.css';\nimport Weather from './app_component/weather.component';\nimport \"weather-icons/css/weather-icons.css\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Form from './app_component/form.component';\n\n\n//api call api.openweathermap.org/data/2.5/weather?q=London,uk&appid={API key}\nconst API_key = \"ae11c5ab72dbfae387d93224fdf384b7\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state ={\n      city:undefined,\n      country:undefined,\n      icon:undefined,\n      main:undefined,\n      celsius:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      description:\"\",\n      error:false\n    };\n    \n\n    this.weatherIcons={\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    };\n  };\n\n  calCelsius(temp){\n    let cell= Math.floor(temp-273.15);\n    return cell;\n  }\n\n  get_WeatherIcons (icons,rangeId) {\n    switch(true){\n      case rangeId >=200 && rangeId<=232:\n        this.setState({icon:this.weatherIcons.Thunderstorm});\n        break;\n        case rangeId >=300 && rangeId<=321:\n        this.setState({icon:this.weatherIcons.Drizzle});\n        break;\n        case rangeId >=500 && rangeId<=531:\n        this.setState({icon:this.weatherIcons.Rain});\n        break;\n        case rangeId >=600 && rangeId<=622:\n        this.setState({icon:this.weatherIcons.Snow});\n        break;\n        case rangeId >=701 && rangeId<=781:\n        this.setState({icon:this.weatherIcons.Atmosphere});\n        break;\n        case rangeId ===800:\n        this.setState({icon:this.weatherIcons.Clear});\n        break;\n        case rangeId >=801 && rangeId<=804:\n        this.setState({icon:this.weatherIcons.Clouds});\n        break;\n        default:\n          this.setState({icon:this.weatherIcons.Clouds});\n\n    };\n  };\n\n  getWeather = async(e)=>{\n   e.preventDefault();\n\n   const city = e.target.elements.city.value;\n   const country = e.target.elements.country.value;\n\n   if(city && country) {\n    const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n   \n       const response = await api_call.json();\n   \n       console.log(response);\n   \n       this.setState({\n         city:`${response.name},${response.sys.country}`,\n         celsius: this.calCelsius(response.main.temp),\n         temp_max:this.calCelsius(response.main.temp_max),\n         temp_min:this.calCelsius(response.main.temp_min),\n         description:response.weather[0].description,\n         error:false\n       });\n       this.get_WeatherIcons(this.weatherIcons,response.weather[0].id);   \n   }else{\n     this.setState({error:true})\n   }\n\n  };\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error}/>\n      <Weather city={this.state.city} \n      country={this.state.country}\n      temp_celsius={this.state.celsius}\n      temp_max={this.state.temp_max}\n      temp_min={this.state.temp_min}\n      description={this.state.description}\n      weatherIcons={this.state.icon}\n      />\n     </div>\n    );\n  };\n};\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}